<script src="/assets/go.js"></script>
<script type="text/javascript">
    var dataArray;
    $( document ).ready(function() {
       init();
    });
    function loadElements(){
     dataArray = $('#data_init').data("array");
    }

    function init() {
      loadElements();
      var $ = go.GraphObject.make; 
      myDiagram =
      $(go.Diagram, "myDiagram",  
          { 
          initialAutoScale: go.Diagram.UniformToFill,
            initialContentAlignment: go.Spot.Center ,
            allowDrop: true,
            allowZoom: true,
            layout:
            $(go.LayeredDigraphLayout,
              { direction: -180,
                layerSpacing: 10,
                columnSpacing: 40,
                setsPortSpots: true })
          });
      myDiagram.nodeTemplate =
      $(go.Node, "Auto",
        new go.Binding("location", "loc"),
        { locationSpot: go.Spot.Center,
          toEndSegmentLength: 30, fromEndSegmentLength: 30
        },
        $(go.Shape, "Rectangle",
        { name: "OBJSHAPE",
          fill: "white",
          desiredSize: new go.Size(250, 250)}),
        $(go.TextBlock,
          { margin: 4 },
          new go.Binding("text", "key")),{});
      
      myDiagram.linkTemplate =
      $(go.Link,
        {
          routing: go.Link.Bezier,
             curve: go.Link.Bezier,
             toShortLength: 4
        },
        $(go.Shape,
          new go.Binding("stroke", "color"),  // shape.stroke = data.color
          new go.Binding("strokeWidth", "thick")),  // shape.strokeWidth = data.thick
        $(go.Shape,
          { toArrow: "Standard", fill: null },
          new go.Binding("stroke", "color"),  // shape.stroke = data.color
          new go.Binding("strokeWidth", "thick"))  // shape.strokeWidth = data.thick
      );
      var linkDataArray = [];
      var nodeDataArray = [];
      var arraylength = dataArray.length;
      for(var i = 0; i<arraylength; i++){  
        var hash = { from: dataArray[i][0], to: dataArray[i][1], color: dataArray[i][2],thick: 2};
        linkDataArray.push(hash);
      }
      myDiagram.model =
      $(go.GraphLinksModel,
        {archetypeNodeData: {},
          linkDataArray: linkDataArray
        });
      myDiagram.addDiagramListener("ChangedSelection",
       function() { updateHighlights(getRadioButton()); } );

    }

    function updateHighlights(e) {
      myDiagram.nodes.each(function(node) { node.highlight = 0; });
      myDiagram.links.each(function(link) { link.highlight = 0; });
      var sel = myDiagram.selection.first();
      if (sel !== null) {
        switch (e.id) {
          case "Links all": linksAll(sel, 1); break;
          case "Nodes connect": nodesConnect(sel, 1); break;
        }
      }
      myDiagram.nodes.each(function(node) {
        var shp = node.findObject("OBJSHAPE");
        var grp = node.findObject("GROUPTEXT");
        var hl = node.highlight;
        highlight(shp, grp, hl);
      });
      // links
      myDiagram.links.each(function(link) {
        var hl = link.highlight;
        var shp = link.findObject("OBJSHAPE");
        var arw = link.findObject("ARWSHAPE");
        highlight(shp, arw, hl);
      });
    }

    function nodesConnect(x, i) {
      if (x instanceof go.Node) {
        x.linksConnected.each(function(link) { link.highlight = i; });
      }
      if (x instanceof go.Link) {
        x.toNode.highlight = i;
        x.fromNode.highlight = i;
      } else {
        x.findNodesConnected().each(function(node) { node.highlight = i; });
      }
    }

    function highlight(shp, obj2, hl) {
      var color;
      var width = 2;
      if (hl === 0) { color = "black"; width = 1; }
      else if (hl === 1) { color = "#DD002C"; }
      else if (hl === 2) { color = "green"; }
      else if (hl === 3) { color = "orange"; }
      else if (hl === 4) { color = "red"; }
      else { color = "purple"; }
      shp.stroke = color;
      shp.strokeWidth = width;
      if (obj2 !== null) {
        obj2.stroke = color;
        obj2.fill = color;
      }
    }

    function getRadioButton() {
      var radio = document.getElementsByName("highlight");
      for (var i = 0; i < radio.length; i++)
        if (radio[i].checked) return radio[i];
    }
</script>
<div class="container">
  <div>
  <input id="ZoomOut" type="button" value="-" onclick="myDiagram.commandHandler.decreaseZoom()" class= "btn btn-warning btn-outlined">
  <input id="ZoomIn" type="button" value="+" onclick="myDiagram.commandHandler.increaseZoom()" class="btn btn-warning btn-outlined">
</div>
  <div id="data_init" data-array="<%=@array_ancestor%>">
    <div id="displays" >
      <div id="myDiagram" style="height: 1800px;"></div>
      <label>
      <input type="radio" name="highlight" checked="checked" onclick="updateHighlights(this)" id="Nodes connect" style="display: none;"></label><br>
    </div>
  </div>
</div>